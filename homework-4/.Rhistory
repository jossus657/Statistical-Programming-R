abs_gtr(tes1, tes2)
tes3 <- pqnumber(tes1$sign, tes1$p, tes2$q, c(tes1$nums, rep(0, (tes2$q - tes1$q))))
tes2$q - tes1$q
tes3 <- pqnumber(tes2$sign, tes2$p, tes1$q, c(tes2$nums, rep(0, (tes1$q - tes2$q))))
print.pqnumber(tes3, DEC = TRUE)
print.pqnumber(tes1, DEC = TRUE)
# note that borrowing and carry over are going to be one function
abs_gtr <- function(a, b) {
if (a$q > b$q) {
b <- pqnumber(b$sign, b$p, a$q, c(b$nums, rep(0, (a$q - b$q))))
} else if (b$q > a$q) {
a <- pqnumber(a$sign, a$p, b$q, c(a$nums, rep(0, (b$q - a$q))))
}
for (i in 1:(a$q + 1)) {
if (a$nums[i] > b$nums[i]) {
return(TRUE)
} else if (a$nums[i] < b$nums[i]) {
return(FALSE)
}
}
}
# note that borrowing and carry over are going to be one function
abs_gtr <- function(a, b) {
if (a$q > b$q) {
b <- pqnumber(b$sign, b$p, a$q, c(b$nums, rep(0, (a$q - b$q))))
} else if (b$q > a$q) {
a <- pqnumber(a$sign, a$p, b$q, c(a$nums, rep(0, (b$q - a$q))))
}
for (i in 1:(a$q + 1)) {
if (rev(a$nums)[i] > rev(b$nums)[i]) {
return(TRUE)
} else if (rev(a$nums)[i] < rev(b$nums)[i]) {
return(FALSE)
}
}
}
abs_gtr(tes1, tes2)
print.pqnumber(tes1, DEC = TRUE)
print.pqnumber(tes2, DEC = TRUE)
# note that borrowing and carry over are going to be one function
abs_gtr <- function(a, b) {
if (a$q > b$q) {
b <- pqnumber(b$sign, b$p, a$q, c(b$nums, rep(0, (a$q - b$q))))
print.pqnumber(b , DEC = TRUE)
} else if (b$q > a$q) {
a <- pqnumber(a$sign, a$p, b$q, c(a$nums, rep(0, (b$q - a$q))))
print.pqnumber(a , DEC = TRUE)
}
for (i in 1:(a$q + 1)) {
if (rev(a$nums)[i] > rev(b$nums)[i]) {
return(TRUE)
} else if (rev(a$nums)[i] < rev(b$nums)[i]) {
return(FALSE)
}
}
}
abs_gtr(tes1, tes2)
# note that borrowing and carry over are going to be one function
abs_gtr <- function(a, b) {
if (a$q > b$q) {
b <- pqnumber(b$sign, b$p, a$q, c(b$nums, rep(0, (a$q - b$q))))
print.pqnumber(b , DEC = TRUE)
} else if (b$q > a$q) {
a <- pqnumber(a$sign, a$p, b$q, c(a$nums, rep(0, (b$q - a$q))))
print.pqnumber(a , DEC = TRUE)
}
print.pqnumber(a , DEC = TRUE)
print.pqnumber(b , DEC = TRUE)
for (i in 1:(a$q + 1)) {
if (rev(a$nums)[i] > rev(b$nums)[i]) {
return(TRUE)
} else if (rev(a$nums)[i] < rev(b$nums)[i]) {
return(FALSE)
}
}
}
abs_gtr(tes1, tes2)
# note that borrowing and carry over are going to be one function
abs_gtr <- function(a, b) {
if (a$q > b$q) {
b <- pqnumber(b$sign, b$p, a$q, c(b$nums, rep(0, (a$q - b$q))))
print.pqnumber(b , DEC = TRUE)
} else if (b$q > a$q) {
a <- pqnumber(a$sign, a$p, b$q, c(a$nums, rep(0, (b$q - a$q))))
print.pqnumber(a , DEC = TRUE)
}
print(a$nums)
print(b$nums)
for (i in 1:(a$q + 1)) {
if (rev(a$nums)[i] > rev(b$nums)[i]) {
return(TRUE)
} else if (rev(a$nums)[i] < rev(b$nums)[i]) {
return(FALSE)
}
}
}
abs_gtr(tes1, tes2)
print.pqnumber(tes1, DEC = TRUE)
print.pqnumber(tes2, DEC = TRUE)
print.pqnumber(tes3, DEC = TRUE)
c(tes2$nums, rep(0, (tes1$q - tes2$q)))
rep(0, (tes1$q - tes2$q)
rep(0, (tes1$q - tes2$q))
rep(0, (tes1$q - tes2$q))
print.pqnumber(tes3, DEC = TRUE)
tes2 <-  pqnumber(1, 3, 3, c(1,2,3,0, 1,0,0))
tes3 <- pqnumber(tes2$sign, tes2$p, tes1$q, c(tes2$nums, rep(0, (tes1$q - tes2$q))))
print.pqnumber(tes3, DEC = TRUE)
print.pqnumber(tes1, DEC = TRUE)
abs_gtr(tes1, tes2)
add <- function(x, y) {
# error handle
max_p <- max(x$p, y$p)
max_q <- max(x$q, y$q)
n <- max_p + max_q + 1
z <- rep(0L, n)
if(x$sign == y$sign) {
x_vals <- x$nums
y_vals <- y$nums
sgn <- x$sign
} else {
if(abs_gtr(x,y)) {
x_vals <- x$nums
y_vals <- -y$nums
sgn <- x$sign
} else {
x_vals <- -x$nums
y_vals <- y$nums
sgn <- y$sign
}
}
z[(1 + max_p - x$p):(1 + max_p + x$q)] <- x_vals
z[(1 + max_p - y$p):(1 + max_p + y$q)] <- z[(1 + max_p - y$p):(1 + max_p + y$q)] + y_vals
z <- carry_over(z)
digit_offset <- length(z) - n
pqnumber(sgn, max_p, max_q + digit_offset, z)
}
subrtact <- function(x, y) {
y$sign <- y$sign * -1
add(x, y)
}
add(x,x)
add(y, y)
add(x, y)
add(y, y)
add(x,x)
add(x, y)
add(y, y)
as_numeric <- function(x) {
#converts pqnumber to numeric
#Args:
#x: pqnumber size 1
#Return:
#numeric size 1
dec_num <- 0
for(i in seq_along(x$nums)) {
dec_num <- dec_num + (x$nums[i] * 10^(i-1))
}
exp <- -1 * x$p
dec_num <- dec_num * x$sign * (10^exp)
dec_num
}
as_numeric(x)
as_numeric(y)
as_pqnumber(3.14)
as_pqnumber(3.14, 2, 0)
as_pqnumber.numeric(3.14, 2, 0)
as_pqnumber <- function(x, p, q) {
UseMethod('as_pqnumber')
}
as_pqnumber.numeric <- function(x, p, q) {
nums <- (abs(x) * 10^seq(p, -q)) %% 10 %/% 1
sgn <- if(x == 0) 1 else base::sign(x)
pqnumber(sgn, p, q, nums)
}
as_pqnumber(3.14, 2, 0)
as_numeric <- function(x) {
UseMethod('as_numeric')
}
as_numeric.pqnumber <- function(x) {
#converts pqnumber to numeric
#Args:
#x: pqnumber size 1
#Return:
#numeric size 1
dec_num <- 0
for(i in seq_along(x$nums)) {
dec_num <- dec_num + (x$nums[i] * 10^(i-1))
}
exp <- -1 * x$p
dec_num <- dec_num * x$sign * (10^exp)
dec_num
}
as_numeric(x)
as_numeric(y)
as_numeric.pqnumber(x)
as_numeric(y)
subtract(y, x)
subtract <- function(x, y) {
y$sign <- y$sign * -1
add(x, y)
}
subtract(y, x)
# note that borrowing and carry over are going to be one function
abs_gtr <- function(a, b) {
if (a$q > b$q) {
b <- pqnumber(b$sign, b$p, a$q, c(b$nums, rep(0, (a$q - b$q))))
} else if (b$q > a$q) {
a <- pqnumber(a$sign, a$p, b$q, c(a$nums, rep(0, (b$q - a$q))))
}
for (i in 1:(a$q + 1)) {
if (rev(a$nums)[i] > rev(b$nums)[i]) {
return(TRUE)
} else if (rev(a$nums)[i] < rev(b$nums)[i]) {
return(FALSE)
}
}
}
subtract(y, x)
subtract(x, y)
pos <-pqnumber(1, 3, 3, c(1,2,3,0, 1,0,0))
neg <- pqnumber(-1, 3, 4, c(1,2,3,4, 0,0,0,0))
add(pos, neg)
add(neg, pos)
subtract(pos, neg)
subtract(neg, pos)
seq_along(x)
x
seq_along(x$nums)
for(i in x$nums){
print(i)
}
for(i in seq_along(x$nums){
for(i in seq_along(x$nums){
for(i in seq_along(x$nums)){
print(i)
}
for(i in 1:length($nums)){
for(i in seq_along(x$nums)){
print(i)
}
for(i in 1:length(x$nums)){
print(i)
}
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
source("405568250_stats102a_hw4.R")
setwd("C:/Users/joshu/OneDrive/Desktop/405568250_stats102a_hw4")
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
pqnumber(1, 2, 0, c(4, 1, 3))
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
pqnumber(1, 2, 0, c(4, 1, 3))
is.integer(c(1,3,4))
all(is.integer(c(1,3,4)))
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
pqnumber(1, 2, 0, c(4, 1, 3))
pqnumber(1, 2, 0, c(4, 1, 3))
View(pqnumber)
for (i in c(1,2,3)) {
is.integer(i)
}
for (i in c(1,2,3)) {
print(is.integer(i))
}
for (i in c(1L,2,3)) {
print(is.integer(i))
}
print(is_integer(i))
for (i in c(1L,2,3)) {
print(is_integer(i))
}
for (i in c(1L,2,3)) {
print(i)
}
is.integer(1)
is.integer(1L)
is.numeric(1L)
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
pqnumber(1, 2, 0, c(4, 1, 3))
```{r error=TRUE}
pqnumber(0.5, 2, 0, c(4, 1, 3)) # expected output: error
prnumber(sign = 1, p = 3, q = 4, nums = 1:8)
pqnumber(sign = 1, p = 3, q = 4, nums = 1:8)
pqnumber(sign = 1, p = 3, q = 4, nums = [1 2 3 4 5 6 7 8])   # expected output: 8
pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2))
is_pqnumber(pqnumber(1, 2, 0, c(4, 1, 3)))
is_pqnumber(213) # expected output: error
is_pqnumber(pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2))) # expected output: true
is_pqnumber(matrix(0,3,3)) # expected output: false
print.pqnumber(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8))
print.pqnumber(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8), DEC = TRUE) # expected: 87654.321
print.pqnumber(pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2)))
print.pqnumber(pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2)))
```{r}
print.pqnumber(pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2)), DEC = TRUE)
print(pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2)), DEC = TRUE) # expected: -27.18282
as_pqnumber(87654.321)
as_pqnumber(87654.321, 3, 4)
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
as_pqnumber(87654.321, 3, 4)
as_pqnumber(3.1415926, 7, 0)
as_pqnumber(-27.18282, 5, 1)
as_pqnumber('String') # expected: error
as_pqnumber(123, 2, '2') # expected: error
as_pqnumber.numeric(-27.18282, 5, 1)
as_numeric.pqnumber(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8))
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
as_numeric.pqnumber(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8))
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
as_numeric.pqnumber(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8))
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
as_numeric.pqnumber(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8))
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
as_numeric.pqnumber(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8))
87654321 * (10^-6)
87654321 * (10^-4)
87654321 * (10^-3)
87654321 * (10^-1)
options(digits = 5)
87654321 * (10^-1)
87654321 * (10^-5)
options(digits = 20)
87654321 * (10^-5)
options(digits = 8)
87654321 * (10^-3)
as_numeric.pqnumber(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8))
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
as_numeric.pqnumber(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8))
as_numeric.pqnumber(pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2)))
as_numeric.pqnumber(pqnumber(sign = 1, p = 1, q = 3, nums = c(2, 3, 4, 4, 5)))
2
2 + 3
as_numeric.pqnumber(23)
as_numeric(pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2))) # expected: -27.18282
add(pqnumber(sign = 1, p = 3, q = 4, nums = 1:8),pqnumber(sign = 1, p = 3, q = 4, nums = 1:8))
as_numeric.pqnumber(23) # expected: error
multiply <- function(x, y) {
n <- x$p + y$p + x$q + y$q + 1
z <- rep(0L, n)
for (r in 1:(1 + y$p + y$q)) {
x_leftover <- x$p + x$q + 1 - r
z[r:(r + x_leftover)] <- z[r:(r + x_leftover)] + (x$nums + y$nums[r])
}
z <- carry_over(z)
digit_offset <- length(z) - n
sgn <- x$sign * y$sign
p_new <- x$p + y$p
q_new <- length(z) - p_new - 1
pqnumber(sgn, p_new, q_new, z)
}
multiply(pqnumber(1, 2, 0, c(4, 1, 3)), pqnumber(1, 2, 0, c(4, 1, 3)))
multiply <- function(x, y) {
n <- x$p + y$p + x$q + y$q + 1
z <- rep(0L, n)
for (r in 1:(1 + y$p + y$q)) {
x_leftover <- x$p #+ x$q + 1 - r
z[r:(r + x_leftover)] <- z[r:(r + x_leftover)] + (x$nums + y$nums[r])
}
z <- carry_over(z)
digit_offset <- length(z) - n
sgn <- x$sign * y$sign
p_new <- x$p + y$p
q_new <- length(z) - p_new - 1
pqnumber(sgn, p_new, q_new, z)
}
multiply(pqnumber(1, 2, 0, c(4, 1, 3)), pqnumber(1, 2, 0, c(4, 1, 3)))
multiply <- function(x, y) {
n <- x$p + y$p + x$q + y$q + 1
z <- rep(0L, n)
for (r in 1:(1 + y$p + y$q)) {
x_leftover <- x$p + x$q - r
z[r:(r + x_leftover)] <- z[r:(r + x_leftover)] + (x$nums + y$nums[r])
}
z <- carry_over(z)
digit_offset <- length(z) - n
sgn <- x$sign * y$sign
p_new <- x$p + y$p
q_new <- length(z) - p_new - 1
pqnumber(sgn, p_new, q_new, z)
}
multiply(pqnumber(1, 2, 0, c(4, 1, 3)), pqnumber(1, 2, 0, c(4, 1, 3)))
multiply <- function(x, y) {
n <- x$p + y$p + x$q + y$q + 1
z <- rep(0L, n)
for (r in 1:(1 + y$p + y$q)) {
x_leftover <- x$p + x$q + 1 - r
z[r:(r + x_leftover)] <- z[r:(r + x_leftover)] + (x$nums * y$nums[r])
}
z <- carry_over(z)
digit_offset <- length(z) - n
sgn <- x$sign * y$sign
p_new <- x$p + y$p
q_new <- length(z) - p_new - 1
pqnumber(sgn, p_new, q_new, z)
}
multiply(pqnumber(1, 2, 0, c(4, 1, 3)), pqnumber(1, 2, 0, c(4, 1, 3)))
abs_gtr(test1, test2) # expected: true
test1 <-  pqnumber(1, 3, 4, c(1,2,3,4, 0,0,0,0))
test2 <-  pqnumber(1, 3, 3, c(1,2,3,0, 1,0,0))
abs_gtr(test1, test2) # expected: true
abs_gtr(test2, test1) # expected: true
abs_gtr(pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2)), pqnumber(sign = 1, p = 3, q = 4, nums = 1:8)) # expected: False
abs_gtr(pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2)), 12) # expected: error
ex1 <- pqnumber(1, 2, 0, c(4, 1, 3))
pqnumber(1, 2, 0, c(4, 1, 3))
ex2 <- pqnumber(sign = 1, p = 3, q = 4, nums = 1:8)
pqnumber(sign = 1, p = 3, q = 4, nums = 1:8)
ex3 <- pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2))
pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2))
ex4 <- pqnumber(sign = 1, p = 6, q = 0, nums = c(3, 9, 5, 1, 4, 1, 3))
pqnumber(sign = 1, p = 6, q = 0, nums = c(3, 9, 5, 1, 4, 1, 3))
is_pqnumber(ex1) # expected output: true
is_pqnumber(213) # expected output: false
is_pqnumber(matrix(0,3,3)) # expected output: false
is_pqnumber(ex3) # expected output: true
print.pqnumber(ex2)
print.pqnumber(ex4)
print.pqnumber(ex2, DEC = TRUE) # expected: 87654.321
print(ex3, DEC = TRUE) # expected: -27.18282
as_numeric.pqnumber(ex4) # expected: 5443.2
as_numeric(ex1) # expected: -27.18282
as_numeric(ex3) # expected: -27.18282
abs_gtr(ex4, ex3) # expected: False
abs_gtr(ex3, ex4) # expected: true
add(ex2, ex3) # expected: true
print(add(ex1, ex2), DEC = TRUE)
add(22, ex3)
print(add(ex4, ex3), DEC = TRUE)
print(add(ex3, ex4), DEC = TRUE)
print(add(ex2, ex4), DEC = TRUE)
print(add(ex3, ex2), DEC = TRUE)
print(add(ex2, ex3), DEC = TRUE)
print(add(ex2, ex3), DEC = TRUE)
print(add(ex3, ex1), DEC = TRUE)
print(add(ex1, ex3), DEC = TRUE)
add(ex2, pqnumber(sign = -1, p = 3, q = 4, nums = 1:8))
add(ex2, pqnumber(sign = -1, p = 3, q = 4, nums = 1:8))
abs_gtr(ex2, pqnumber(sign = -1, p = 3, q = 4, nums = 1:8))
abs_gtr(ex2, pqnumber(sign = -1, p = 3, q = 4, nums = 1:8))
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
abs_gtr(ex2, pqnumber(sign = -1, p = 3, q = 4, nums = 1:8))
dd
add(ex2, pqnumber(sign = -1, p = 3, q = 4, nums = 1:8))
print(subtract(ex1, ex2), DEC = TRUE) # 87657.461
print(subtract(ex1, ex3), DEC = TRUE) # -24.04282
print(subtract(ex2, ex3), DEC = TRUE) # 87627.13818
subtract(22, ex3) # error
print(subtract(ex3, ex1), DEC = TRUE) # -24.04282
multiply <- function(x, y) {
n <- x$p + y$p + x$q + y$q + 1
z <- rep(0L, n)
for (r in 1:(1 + y$p + y$q)) {
x_leftover <- y$p + y$q + 1 - r
z[r:(r + x_leftover)] <- z[r:(r + x_leftover)] + (x$nums * y$nums[r])
}
z <- carry_over(z)
digit_offset <- length(z) - n
sgn <- x$sign * y$sign
p_new <- x$p + y$p
q_new <- length(z) - p_new - 1
pqnumber(sgn, p_new, q_new, z)
}
multiply(pqnumber(1, 2, 0, c(4, 1, 3)), pqnumber(1, 2, 0, c(4, 1, 3)))
multiply <- function(x, y) {
n <- x$p + y$p + x$q + y$q + 1
z <- rep(0L, n)
for (r in 1:(1 + y$p + y$q)) {
x_leftover <- x$p + x$q
z[r:(r + x_leftover)] <- z[r:(r + x_leftover)] + (x$nums * y$nums[r])
}
z <- carry_over(z)
digit_offset <- length(z) - n
sgn <- x$sign * y$sign
p_new <- x$p + y$p
q_new <- length(z) - p_new - 1
pqnumber(sgn, p_new, q_new, z)
}
multiply(pqnumber(1, 2, 0, c(4, 1, 3)), pqnumber(1, 2, 0, c(4, 1, 3)))
print(multiply(ex1, ex2), DEC = TRUE) # -87651.181
print(subtract(ex2, ex3), DEC = TRUE) # 87681.50382
print(multiply(ex2, ex3), DEC = TRUE) # 87681.50382
print(multiply(ex1, ex3), DEC = TRUE) #30.32282
print(multiply(ex3, ex1), DEC = TRUE) # -30.32282
print(multiply(ex1, ex1), DEC = TRUE) # -30.32282
print(multiply(ex1, ex4), DEC = TRUE) # 9.8596
print(multiply(ex1, ex1), DEC = TRUE) # 9.8596
knitr::opts_chunk$set(echo = TRUE)
source("405568250_stats102a_hw4.R")
ex1 <- pqnumber(1, 2, 0, c(4, 1, 3))
pqnumber(1, 2, 0, c(4, 1, 3))
pqnumber(0.5, 2, 0, c(4, 1, 3)) # expected output: error
ex2 <- pqnumber(sign = 1, p = 3, q = 4, nums = 1:8)
pqnumber(sign = 1, p = 3, q = 4, nums = 1:8)
ex3 <- pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2))
pqnumber(sign = -1, p = 5, q = 1, nums = c(2, 8, 2, 8, 1, 7, 2))
ex4 <- pqnumber(sign = 1, p = 6, q = 0, nums = c(3, 9, 5, 1, 4, 1, 3))
pqnumber(sign = 1, p = 6, q = 0, nums = c(3, 9, 5, 1, 4, 1, 3))
print(add(ex1, ex2), DEC = TRUE) # 87657.461
print.pqnumber(add(ex1, ex2), DEC = TRUE) # 87657.461
